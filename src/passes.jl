using Core.Intrinsics

const intrinsic_table = Dict(
    abs_float => (abs),
    add_float => (+),
    add_float_fast => (+),
    add_int => (+),
    add_ptr => (()),
    and_int => (&),
    ashr_int => (>>),
    bswap_int => (bswap),
    ceil_llvm => (ceil),
    checked_sadd_int => (+),
    checked_sdiv_int => (div),
    checked_smul_int => (*),
    checked_srem_int => (%),
    checked_ssub_int => (-),
    checked_uadd_int => (+),
    checked_udiv_int => (div),
    checked_umul_int => (*),
    checked_urem_int => (%),
    checked_usub_int => (-),
    copysign_float => (copysign),
    ctlz_int => (leading_zeros),
    ctpop_int => (count_ones),
    cttz_int => (trailing_zeros),
    div_float => (/),
    div_float_fast => (/),
    eq_float => (==),
    eq_float_fast => (==),
    eq_int => (==),
    flipsign_int => (flipsign),
    floor_llvm => (floor),
    fma_float => (fma),
    fpiseq => (isequal),
    fpislt => (isless),
    le_float => (<=),
    le_float_fast => (<=),
    lshr_int => (>>),
    lt_float => (<),
    lt_float_fast => (<),
    mul_float => (*),
    mul_float_fast => (*),
    mul_int => (*),
    muladd_float => (muladd),
    ne_float => (!=),
    ne_float_fast => (!=),
    ne_int => (!=),
    neg_float => (-),
    neg_int => (-),
    not_int => (~),
    or_int => (|),
    rem_float => (%),
    rem_float_fast => (%),
    rint_llvm => (round),
    sdiv_int => (div),
    shl_int => (<<),
    sle_int => (<=),
    slt_int => (<),
    sqrt_llvm => (sqrt),
    srem_int => (%),
    sub_float => (-),
    sub_float_fast => (-),
    sub_int => (-),
    sub_ptr => (()),
    trunc_llvm => (trunc),
    udiv_int => (div),
    ule_int => (<=),
    ult_int => (<),
    urem_int => (%),
    xor_int => (xor),
)
const intrinsic_table_syms = Dict(Symbol(k) => Symbol(v) for (k, v) in pairs(intrinsic_table))
#
# const intrinsic_table = Dict(
#     #(bitcast, 2) => (),
#
#     (neg_int, 1) => (-),
#     (add_int, 2) => (+),
#     (sub_int, 2) => (-),
#     (mul_int, 2) => (*),
#     (sdiv_int, 2) => (÷),
#     (udiv_int, 2) => (÷),
#
#     (srem_int, 2) => (%),
#     (urem_int, 2) => (%),
#
#     # (add_ptr, 2) => (),
#     # (sub_ptr, 2) => (),
#
#     (neg_float, 1) => (-),
#     (add_float, 2) => (+),
#     (sub_float, 2) => (-),
#     (mul_float, 2) => (*),
#     (div_float, 2) => (/),
#     (rem_float, 2) => (%),
#     (fma_float, 3) => (fma),
#     (muladd_float, 3) => (muladd),
#
#     # fast neg_float_fast
#     (neg_float, 1) => (-),
#     (add_float_fast, 2) => (+),
#     (sub_float_fast, 2) => (-),
#     (mul_float_fast, 2) => (*),
#     (div_float_fast, 2) => (/),
#     (rem_float_fast, 2) => (%),
#
#     #  same-type comparisons */ => (),
#     (eq_int, 2) => (==),
#     (ne_int, 2) => (!=),
#     (slt_int, 2) => (<),
#     (ult_int, 2) => (<),
#     (sle_int, 2) => (<=),
#     (ule_int, 2) => (<=),
#     (eq_float, 2) => (==),
#     (ne_float, 2) => (!=),
#     (lt_float, 2) => (<),
#     (le_float, 2) => (<=),
#
#     (eq_float_fast, 2) => (==),
#     (ne_float_fast, 2) => (!=),
#     (lt_float_fast, 2) => (<),
#     (le_float_fast, 2) => (<=),
#
#     (fpiseq, 2) => (isequal),
#     (fpislt, 2) => (isless),
#
#     #bitwise operators
#     (and_int, 2) => (&),
#     (or_int, 2) => (|),
#     (xor_int, 2) => (⊻),
#     (not_int, 1) => (~),
#
#     (shl_int, 2) => (<<),
#     (lshr_int, 2) => (>>),
#     (ashr_int, 2) => (>>),
#     (bswap_int, 1) => (bswap),
#     (ctpop_int, 1) => (count_ones),
#     (ctlz_int, 1) => (leading_zeros),
#     (cttz_int, 1) => (trailing_zeros),
#
#     # conversion */ => (),
#     # (sext_int, 2) => (),
#     # (zext_int, 2) => (),
#     # (trunc_int, 2) => (),
#     # (fptoui, 2) => (),
#     # (fptosi, 2) => (),
#     # (uitofp, 2) => (),
#     # (sitofp, 2) => (),
#     # (fptrunc, 2) => (),
#     # (fpext, 2) => (),
#
#     # checked arithmetic */ => (),
#     (checked_sadd_int, 2) => (+),
#     (checked_uadd_int, 2) => (+),
#     (checked_ssub_int, 2) => (-),
#     (checked_usub_int, 2) => (-),
#     (checked_smul_int, 2) => (*),
#     (checked_umul_int, 2) => (*),
#     (checked_sdiv_int, 2) => (÷),
#     (checked_udiv_int, 2) => (÷),
#     (checked_srem_int, 2) => (%),
#     (checked_urem_int, 2) => (%),
#
#     # functions */ => (),
#     (abs_float, 1) => (abs),
#     (copysign_float, 2) => (copysign),
#     (flipsign_int, 2) => (flipsign),
#     # (select_value, 3) => (),
#     (ceil_llvm, 1) => (ceil),
#     (floor_llvm, 1) => (floor),
#     (trunc_llvm, 1) => (trunc),
#     (rint_llvm, 1) => (round),
#     (sqrt_llvm, 1) => (sqrt),
# pointer access */ => (),
# (pointerref, 3) => (),
# (pointerset, 4) => (),
# interface
# (cglobal, 2) => (),
# ALIAS(llvmcall, llvmcall) => (),
# /* object access */ => (),
# (arraylen, 1) => (),
# /*  hidden intrinsics */ => (),

# )
